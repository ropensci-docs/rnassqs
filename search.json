[{"path":"https://docs.ropensci.org/rnassqs/CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"NA","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"https://docs.ropensci.org/rnassqs/CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"NA","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://docs.ropensci.org/rnassqs/CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"NA","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://docs.ropensci.org/rnassqs/CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"NA","text":"Code Conduct applies within project spaces, also applies individual representing project community public spaces. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://docs.ropensci.org/rnassqs/CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"NA","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team [potter.nicholas@gmail.com]. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://docs.ropensci.org/rnassqs/CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"NA","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":"https://docs.ropensci.org/rnassqs/CONTRIBUTING.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"NA","text":"Contributions welcome. Please begin reading code conduct. several ways contribute: Examples: examples always helpful. use rnassqs query data ‘Quick Stats’ like contribute query, consider submitting pull request adding query file inst/examples/. File issue: functionality ’d like see added something confusing, consider creating issue. best issue contains example problem feature. Consider excellent package reprex creating reproducible example. Contributing documentation: Clarifying expanding documentation always appreciated, especially find area lacking like improve . rnassqs uses roxygen2, means documentation top function definition. Please submit improvements pull request. Contributing code: see something needs improving ’d like make changes, contributed code welcome. Begin filing new issue discuss proposed change, submit pull request address issue. rnassqs follows style outlined Hadley Wickham’s R Packages. Following style makes pull request review go smoothly.","code":""},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"api-information","dir":"Articles","previous_headings":"","what":"API Information","title":"Using rnassqs","text":"USDA-NASS Quick Stats API graphic interface : https://quickstats.nass.usda.gov. Information query parameters found https://quickstats.nass.usda.gov/api/#param_define.","code":""},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"a-quick-example","dir":"Articles","previous_headings":"","what":"A quick example","title":"Using rnassqs","text":"First, obtain API key ‘Quick Stats’ service: https://quickstats.nass.usda.gov/api/. can make query. request number farm operators operation acreage Oregon 2012. Parameters need specified list need capitalized. following equivalent","code":"library(rnassqs)  # Specify the query parameters params <- list(   commodity_desc = \"OPERATORS\",   domain_desc = \"AREA OPERATED\"   agg_level_desc = \"STATE\",   state_alpha = \"OR\",   year = 2012 )  # Check that our record request is under the 50,000 limit nassqs_record_count(params)  # Get the data d <- nassqs(params) # Get the data specifying each parameter as a separate argument to the  # function `rnassqs` d <- nassqs(commodity_desc = \"operators\",              domain_desc = \"area operated\",             agg_level_desc = \"state\",             state_alpha = \"or\",             year = 2012)"},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"convenience-functions","dir":"Articles","previous_headings":"","what":"Convenience functions","title":"Using rnassqs","text":"growing list convenience functions makes querying simpler. example, can retrieve yields acres can also query list fips codes:","code":"# Set parameters params <- list(   commodity_desc = \"APPLES\",   domaincat_desc = \"NOT SPECIFIED\"   agg_level_desc = \"STATE\",   state_alpha = \"OR\",   year = 2012 )  # Yields and Acres yields <- nassqs_yields(params) acres <- nassqs_acres(params) nassqs_byfips(   fips = c(\"19001\", \"17005\", \"17001\"),   commodity_desc = \"CORN\",   year = 2019,   statisticcat_desc = \"YIELD\")"},{"path":[]},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"step-1-authentication","dir":"Articles","previous_headings":"Detailed usage","what":"Step 1: Authentication","title":"Using rnassqs","text":"QuickStats API requires authentication. can get API Key . key, can use following ways:","code":""},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"add-it-to-your--renviron-file","dir":"Articles","previous_headings":"Detailed usage > Step 1: Authentication","what":"Add it to your .Renviron file","title":"Using rnassqs","text":"home directory create edit .Renviron file, add NASSQS_TOKEN = <api key> file. R sessions variable set automatically, rnassqs detect querying data. use Rstudio, can also use usethis::edit_r_environ open .Renviron file add key. create new system environmental variable start new R session. can also set environmental variable directly Sys.setenv(NASSQS_TOKEN = <api key>.","code":""},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"put-it-in-a-file","dir":"Articles","previous_headings":"Detailed usage > Step 1: Authentication","what":"Put it in a file","title":"Using rnassqs","text":"can add file project directory ignore via .gitignore ’re using github. advantage method don’t think API key rest project, repeat process every new project, risk forgetting add .gitignore. api key file, can use like :","code":"# Load the api key api_key <- readLines(\"<file name with api key>\") nassqs_auth(key = api_key)"},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"add-it-interactively","dir":"Articles","previous_headings":"Detailed usage > Step 1: Authentication","what":"Add it interactively","title":"Using rnassqs","text":"don’t want add API key file store .Renviron, can enter console session. less easy enter (copy-paste) key time begin R session. addition, won’t able automate running script, since stop ask provide api key.","code":"# Checks if the api key is set and prints it.  # If it is not set, asks the user to set the value in the console. nassqs_auth()"},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"step-2-building-queries","dir":"Articles","previous_headings":"Detailed usage","what":"Step 2: Building Queries","title":"Using rnassqs","text":"QuickStats API offers bewildering array fields query. rnassqs tries help navigate query building functions return parameter names valid values parameters. nassqs_params() provides parameter names, time writing Including parameter names nassqs_params return description parameter(s) question: Documentation parameters available https://quickstats.nass.usda.gov/api/#param_define. list valid values given field available via nassqs_param_values(param = <parameter name>). example, returns list valid values source_desc parameter. Building query often involves trial error. One way developing query use QuickStats web interface. often fastest method provides quick feedback subset values given query. Alternatively, can query values field iteratively build query. query end takes form list parameters looks like","code":"library(rnassqs)  # returns a list of fields that you can query nassqs_params() #>  [1] \"agg_level_desc\"        \"asd_code\"              \"asd_desc\"              #>  [4] \"begin_code\"            \"class_desc\"            \"commodity_desc\"        #>  [7] \"congr_district_code\"   \"country_code\"          \"country_name\"          #> [10] \"county_ansi\"           \"county_code\"           \"county_name\"           #> [13] \"domaincat_desc\"        \"domain_desc\"           \"end_code\"              #> [16] \"freq_desc\"             \"group_desc\"            \"load_time\"             #> [19] \"location_desc\"         \"prodn_practice_desc\"   \"reference_period_desc\" #> [22] \"region_desc\"           \"sector_desc\"           \"short_desc\"            #> [25] \"state_alpha\"           \"state_ansi\"            \"state_name\"            #> [28] \"state_fips_code\"       \"statisticcat_desc\"     \"source_desc\"           #> [31] \"unit_desc\"             \"util_practice_desc\"    \"watershed_code\"        #> [34] \"watershed_desc\"        \"week_ending\"           \"year\"                  #> [37] \"zip_5\" nassqs_params(\"agg_level_desc\", \"source_desc\") #> [1] \"agg_level_desc: Geographical level of data. Often 'county', 'state', or 'national', but can include other levels as well\" #> [2] \"source_desc: Data source. Either 'CENSUS' or 'SURVEY'\" nassqs_param_values(param = 'source_desc') params <- list(commodity_desc = \"CORN\", year__GE = 2012, state_alpha = \"VA\")"},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"querying-a-range-of-values","dir":"Articles","previous_headings":"Detailed usage > Step 2: Building Queries","what":"Querying a range of values","title":"Using rnassqs","text":"queries probably specific values year = 2012, may also want query ranges values. queries, append one following field ’d like modify: __LE: less equal __LT: less __GE: greater equal __GT: greater __LIKE: like __NOT_LIKE: like __NE: equal parameter list, year__GE year field __GE modifier attached . returned data includes records year greater equal 2012.","code":""},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"querying-multiple-values","dir":"Articles","previous_headings":"Detailed usage > Step 2: Building Queries","what":"Querying multiple values","title":"Using rnassqs","text":"Multiple values can queried including simple list c(). example, ’d like data Washington Oregon, can write state_alpha = c('WA', '').","code":""},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"query-limits","dir":"Articles","previous_headings":"Detailed usage > Step 2: Building Queries","what":"Query limits","title":"Using rnassqs","text":"API returns queries return 50,000 less records, ’s good idea check running query. , can use nassqs_record_count(). Combined assert assertthat package, can ensure queries valid attempting access data:","code":"# Check that the number of returned records will be less than 50000 params <- list(commodity_desc = \"CORN\", year__GE = 2012, state_alpha = \"VA\") records <- nassqs_record_count(params) assertthat::assert_that(as.integer(records$count) <= 50000)"},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"step-3-running-queries","dir":"Articles","previous_headings":"Detailed usage","what":"Step 3: Running Queries","title":"Using rnassqs","text":"’ve built query, running easy:","code":"# Run a query given a set of parameters and an API key nassqs(params = params, key = api_key)"},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"step-4--putting-it-all-together","dir":"Articles","previous_headings":"Detailed usage","what":"Step 4. Putting it all together","title":"Using rnassqs","text":"Putting together, script looks like:","code":"library(rnassqs) library(assertthat) #for checking the size of the query  # Check for the API key. This prints the key if it is set, or asks for it # if the session is interactive nassqs_auth()  # Get a list of available fields parameters <- nassq_params()  # Get valid values for 'commodity_desc' nassqs_param_values(param = 'source_desc')  # Set a list of parameters to query on params <- list(commodity_desc = \"CORN\", year__GE = 2012, state_alpha = \"VA\")  # Check that the number of returned records will be less than 50000 records <- nassqs_record_count(params) assert_that(as.integer(records$count) <= 50000)  # Run a query given a set of parameters and an API key d <- nassqs(params = params, key = api_key)  # Run the same query but parse into a data.frame separately raw <- nassqs_GET(params = params, key = api_key) parsed <- nassqs_parse(raw, as = 'data.frame')"},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"lists-of-parameters-and-dealing-with-large-queries","dir":"Articles","previous_headings":"","what":"Lists of parameters and dealing with large queries","title":"Using rnassqs","text":"ability rnassqs iterate lists parameters especially helpful. cases may wish collect many different sets data, others queries may larger API restriction 50,000 records. cases iterating list parameters helpful.","code":""},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"iterating-to-reduce-individual-query-size","dir":"Articles","previous_headings":"Lists of parameters and dealing with large queries","what":"Iterating to reduce individual query size","title":"Using rnassqs","text":"Generally best way deal large queries make multiple queries subset year possible, geography . care needed subsetting geography. Due suppression data, sum counties state necessarily equal state value. Moreover, data collected specific geographies. best start iterating years, want say county cash rents irrigated land every year since became available 2008, can iterate following: Subsetting geography works similarly, looping geography variable (usually state_alpha county_code like) lapply.","code":"# Define the list of parameters to use repeatedly param_list <- list(   sector_desc = \"ECONOMICS\",   commodity_desc = \"RENT\",   prodn_practice_desc = \"IRRIGATED\",   class_desc = \"CASH, CROPLAND\",   agg_level_desc = \"COUNTY\",   domaincat_desc = \"NOT SPECIFIED\")  # Iterate through each year to get data   data_list <- lapply(2008:2017, function(yr) {   params <- param_list   params[['year']] <- yr   nassqs(params) })  # Using dplyr to bind the data list library(dplyr) df <- rbind_list(data_list)  # Using data.table to bind the data list library(data.table) dt <- rbindlist(data_list)"},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"iterating-over-lists-of-parameters","dir":"Articles","previous_headings":"Lists of parameters and dealing with large queries","what":"Iterating over lists of parameters","title":"Using rnassqs","text":"Similar , times helpful make multiple queries bind data single data.frame. example, may want collect many different categories acres every Agricultural Census since 1997, can something like","code":"# First define a base parameter list to modify for each new query base_params <- list(   source_desc = \"CENSUS\",   sector_desc = \"ECONOMICS\",   commodity_desc = \"AG LAND\",   agg_level_desc = \"COUNTY\",   unit_desc = \"ACRES\",   statisticcat_desc = \"AREA\",   domain_desc = \"TOTAL\",   domaincat_desc = \"NOT SPECIFIED\",   year_GE = 1997 )  # List of parameters that vary for each query param_list <- list(   ag_land_other = list(     class_desc = \"(EXCL CROPLAND & PASTURELAND & WOODLAND)\"),    ag_land_irr = list(     prodn_practice_desc = \"IRRIGATED\",     class_desc = \"ALL CLASSES\"),   ag_woodland = list(     class_desc = \"WOODLAND\"),   ag_pastureland = list(     class_desc = \"PASTURELAND, (EXCL CROPLAND & WOODLAND)\"),   ag_cropland = list(     class_desc = \"CROPLAND\"),   ag_cropland_excl_harvested = list(     class_desc = \"CROPLAND, (EXCL HARVESTED & PASTURED)\"),   ag_cropland_harvested = list(     class_desc = \"CROPLAND, HARVESTED\",     prodn_practice_desc = \"ALL PRODUCTION PRACTICES\"),   ag_cropland_harvested_irr = list(     class_desc = \"CROPLAND, HARVESTED\",     prodn_practice_desc = \"IRRIGATED\")   )      # Iterate through different variable queries   data_list <- lapply(param_list, function(var_params) {     # Create the new parameter list and append the query items that vary     # by query     params <- base_params     for(n in names(var_params)) {        params[[n]] <- var_params[[n]]     }     nassqs(params)   })      # Then rbind_list() or rbindlist() as above"},{"path":"https://docs.ropensci.org/rnassqs/articles/rnassqs.html","id":"under-the-hood","dir":"Articles","previous_headings":"","what":"Under the hood","title":"Using rnassqs","text":"nassqs wrapper around nassqs_GET function, uses httr::GET make HTTP GET request Quick Stats API. need access underlying request object generated GET call, can use nassqs_GET return request object. rnassqs package also nassqs_parse function process request object data.frame, list, raw text. nassqs handles together, can replicate functionality low-level functions follows:","code":"# Make a HTTP GET request and parse into a data.frame with separate # function calls. The below is equivalent to  # 'nassqs(params, key = api_key)' request <- nassqs_GET(params = params, key = api_key) parsed <- nassqs_parse(request, as = 'data.frame')"},{"path":"https://docs.ropensci.org/rnassqs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicholas Potter. Author, maintainer. Robert Dinterman. Contributor. Jonathan Adams. Contributor. Joseph Stachelek. Contributor. Julia Piaskowski. Contributor. Branden Collingsworth. Contributor. Adam Sparks. Reviewer. Neal Richardson. Contributor, reviewer.","code":""},{"path":"https://docs.ropensci.org/rnassqs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Potter NA (2019). “rnassqs: ‘R' package access agricultural data via USDA National Agricultural Statistics Service (USDA-NASS) ’Quick Stats' API.” Journal Open Source Software. Potter N (2023). rnassqs: Access NASS 'Quick Stats' API. R package version 0.6.2, https://CRAN.R-project.org/package=rnassqs.","code":"@Article{,   title = {rnassqs: An `R` package to access agricultural data via the USDA National Agricultural Statistics Service (USDA-NASS) 'Quick Stats' API},   author = {Nicholas A. Potter},   journal = {The Journal of Open Source Software},   year = {2019}, } @Manual{,   title = {{rnassqs}: Access the NASS 'Quick Stats' API},   author = {Nicholas A. Potter},   year = {2023},   note = {R package version 0.6.2},   url = {https://CRAN.R-project.org/package=rnassqs}, }"},{"path":"https://docs.ropensci.org/rnassqs/index.html","id":"rnassqs-r-nass-quick-stats","dir":"","previous_headings":"","what":"rnassqs (R NASS Quick Stats)","title":"Access Data from the NASS Quick Stats API","text":"rnassqs allows users access USDA’s National Agricultural Statistics Service (NASS) Quick Stats data API. simple easy use, provides functions help navigate bewildering complexity Quick Stats data. docs code examples, visit package web page : https://docs.ropensci.org/rnassqs/.","code":""},{"path":"https://docs.ropensci.org/rnassqs/index.html","id":"installing","dir":"","previous_headings":"","what":"Installing","title":"Access Data from the NASS Quick Stats API","text":"Install package via devtools CRAN:","code":"# Via devtools     library(devtools)     install_github('ropensci/rnassqs')          # Via CRAN     install.packages(\"rnassqs\")"},{"path":"https://docs.ropensci.org/rnassqs/index.html","id":"api-key","dir":"","previous_headings":"","what":"API Key","title":"Access Data from the NASS Quick Stats API","text":"use NASS Quick Stats API need API key. API key general included scripts. One way making key available without defining script setting .Renviron file, usually located home directory. rstudio user, can use usethis::edit_r_environ() open .Renviron file add line looks like: Alternatively, can set explicitly console nassqs_auth(key = <api key>). set environmental variable NASSQS_TOKEN, used access API. can also set directly Sys.setenv(\"NASSQS_TOKEN\" = <api key>).","code":"NASSQS_TOKEN=\"<your api key here>\""},{"path":"https://docs.ropensci.org/rnassqs/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Access Data from the NASS Quick Stats API","text":"See examples inst/examples quick recipes download data. primary function nassqs(), can make query variables. example, mirror request NASS API documentation, can use: Parameters need capitalized, also need list format. following works just well: can request data multiple values parameter using simple list follows: NASS allow GET requests pull 50,000 records one request. function inform try . also inform ’ve requested set parameters records. useful functions include:","code":"library(rnassqs)          # You must set your api key before requesting data     nassqs_auth(key = <your api key>)          # Parameters to query on and data call     params <- list(commodity_desc = \"CORN\", year__GE = 2012, state_alpha = \"VA\")     d <- nassqs(params) d <- nassqs(commodity_desc = \"corn\", year__GE = 2012, state_alpha = \"va\") params <- list(commodity_desc = \"CORN\", year__GE = 2012, state_alpha = c(\"VA\", \"WA\"))     d <- nassqs(params) # returns a set of unnique values for the parameter \"STATISTICCAT_DESC\"     nassqs_param_values(\"statisticcat_desc\")          # returns a count of the number of records for a given query     nassqs_record_count(params=params)          # Get yields specifically     # Equivalent to including \"'statisticat_desc' = 'YIELD'\" in your parameter list.      nassqs_yields(params)          # Get acres specifically     # Equivalent to including all \"AREA\" values in statisticcat_desc     nassqs_acres(params)          # Specifies just \"AREA HARVESTED\" values of statisticcat_desc     nassqs_acres(params, area = \"AREA HARVESTED\")"},{"path":"https://docs.ropensci.org/rnassqs/index.html","id":"handling-inequalities-and-operators-other-than-","dir":"","previous_headings":"Usage","what":"Handling inequalities and operators other than “=”","title":"Access Data from the NASS Quick Stats API","text":"NASS API handles operators modifying variable name. API can accept following modifications: __LE: <= __LT: < __GT: > __GE: >= __LIKE: like __NOT_LIKE: like __NE: equal example, request corn yields Virginia Pennsylvania years since 2000, use something like: See vignette examples details usage.","code":"params <- list(commodity_desc = \"CORN\",                    year__GE = 2000,                    state_alpha = c(\"VA\", \"PA\"),                    statisticcat_desc = \"YIELD\")     df <- nassqs(params) #returns data as a data frame."},{"path":"https://docs.ropensci.org/rnassqs/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Access Data from the NASS Quick Stats API","text":"Contributions welcome, several ways contribute: Examples: examples always helpful. use rnassqs query data ‘Quick Stats’ like contribute query, consider submitting pull request adding query file inst/examples/. File issue: functionality ’d like see added something confusing, consider creating issue. best issue contains example problem feature. Consider excellent package reprex creating reproducible example. Contributing documentation: Clarifying expanding documentation always appreciated, especially find area lacking like improve . rnassqs uses roxygen2, means documentation top function definition. Please submit improvements pull request. Contributing code: see something needs improving ’d like make changes, contributed code welcome. Begin filing new issue discuss proposed change, submit pull request address issue. rnassqs follows style outlined Hadley Wickham’s R Packages. Following style makes pull request review go smoothly.","code":""},{"path":"https://docs.ropensci.org/rnassqs/index.html","id":"alternatives","dir":"","previous_headings":"","what":"Alternatives","title":"Access Data from the NASS Quick Stats API","text":"June 2019 usdarnass package released CRAN also available install via github. usdarnass similar functionality package. NASS also provides daily tarred gzipped file entire dataset. time writing approaching 1 GB. can download file via data site. FTP link also contains builds : NASS census (every 5 years ending 2 7), data one specific sectors (CROPS, ECONOMICS, ANIMALS & PRODUCTS). time writing, specific files ENVIRONMENTAL DEMOGRAPHICS sectors available.","code":""},{"path":"https://docs.ropensci.org/rnassqs/index.html","id":"acknowledgments","dir":"","previous_headings":"Alternatives","what":"Acknowledgments","title":"Access Data from the NASS Quick Stats API","text":"Thank rOpensci reviewers Adam Sparks Neal Richardson editor Lincoln Mullen, fantastic feedback assistance. User feedback use case contributions huge help make rnassqs accessible user-friendly. use cases feature requests always welcome!","code":""},{"path":"https://docs.ropensci.org/rnassqs/paper.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"rnassqs R package provides simple interface accessing United States Department Agriculture National Agricultural Statistics Service (USDA-NASS) ‘Quick Stats’ API. core functionality allows user query agricultural data ‘Quick Stats’ reproducible automated way. primary benefit rnassqs users need download data repeated use Quick Stats point--click interface, reduces chance errors, eliminates need repeated manual downloads new data time space, allows automated updates web applications rely new releases USDA-NASS data time. rnassqs manages API authentication setting system environmental variable duration R session. Convenience functions facilitate querying common data. Users can also use rnassqs query list data parameters available values given parameter (example, see commodities available particular county year). query requests data JSON object parses data data.frame object.","code":""},{"path":"https://docs.ropensci.org/rnassqs/paper.html","id":"about-usda-nass-data-and-quick-stats","dir":"","previous_headings":"","what":"About USDA-NASS data and ‘Quick Stats’","title":"Summary","text":"‘Quick Stats’ web interface access data produced USDA-NASS. data comes primarily Census Agriculture, also includes data USDA-NASS surveys wide range topics. Census Agriculture conducted every five years years ending ‘2’ ‘7’. earliest year available Quick Stats 1997. Surveys different collection periods, collected annually. specific data average value agricultural land buildings state reported early 1850. Aggregate data census surveys released primarily national, state, county level, though data may released congressional districts, watersheds, zip codes. includes range data classified five sectors: Animals & Products, Crops, Demographics, Economics, Environmental. Examples data available sectors include counts farms, farm operators, acres cropland, farm sales, farm expenses, crop yields name .","code":""},{"path":"https://docs.ropensci.org/rnassqs/paper.html","id":"benefits-of-rnassqs-over-quick-stats","dir":"","previous_headings":"","what":"Benefits of rnassqs over ‘Quick Stats’","title":"Summary","text":"‘Quick Stats’ provides number selection fields user can select categories data. selection causes options fields update reflect available options available options based selections user made. makes selection multiple different variables times frustrating process. addition, data requests limited 50,000 records. user wants access records must manually subset data request. example, requesting crop yields county counties census years 1997 2017 requires either downloading state’s counties separately , possible, downloading counties year separately. Quick Stats interface works well quick access single use. However, several cases ‘Quick Stats’ interface ideal: Requests combination measures, years, geographies exceed 50,000 records. Requests newly released data identical previous requests. Requests reproducible. rnassqs addresses issues making ‘Quick Stats’ API accessible R code. allows user loop series requests address first issue, execute (perhaps automated schedule) data request repeatedly access new data query address second, make code available allows others reproducibly access data address third. example, currently currently 332,125 records crop yields U.S. counties 2000 2018. Accessing data ‘Quick Stats’ require manually selecting either set years set states reduce request less 50,000 records aggregating data. rnassqs can done : results significant time savings, increases reproducibility data, allows easy updating request new year made available.","code":"# Access yields for all counties and all crops params <- list(sector_desc = \"CROPS\",                group_desc = c(\"FIELD CROPS\", \"FRUIT & TREE NUTS\",                                \"HORTICULTURE\", \"VEGETABLES\"),                statisticcat_desc = \"YIELD\",                 agg_level_desc = \"COUNTY\")  # Get all years from 2000 to 2018 in a list of data.frames data_list <- lapply(2000:2018, function(yr) {    params$year <- yr   rnassqs::nassqs(params, url_only = TRUE) })  # Aggregate the list of data.frames into a single data.frame d <- do.call(\"rbind\", data_list)"},{"path":"https://docs.ropensci.org/rnassqs/paper.html","id":"alternatives-to-rnassqs","dir":"","previous_headings":"","what":"Alternatives to rnassqs","title":"Summary","text":"USDA-NASS also provides FTP access text data files1. accessing data via FTP users can avoid using selection interface ‘Quick Stats’ avoid limitations number records per request, resolve issues automated repeated requests making data requests reproducible. R packages also released since development rnassqs provide access Quick Stats data, though somewhat differently, include usdarnass tidyUSDA, uses US Census maps create maps Quick Stats data.","code":""},{"path":"https://docs.ropensci.org/rnassqs/paper.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Summary","text":"Thank Jonathan Adams, Julia Piaskowski, Joseph Stachelek code contributions. huge thanks reviewers Adam H Sparks Neal Richardson thoughtful feedback improve package documentation.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data and return a data frame — nassqs","title":"Get data and return a data frame — nassqs","text":"primary function rnassqs package, nassqs makes HTTP GET request USDA-NASS Quick Stats API returns data parsed data.frame, plain text, list. Various functions make use nassqs make specific queries. data request Quick Stats API returns JSON parsed data.frame contains 39 columns varying number rows depending query. Unfortunately way restrict number columns.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data and return a data frame — nassqs","text":"","code":"nassqs(   ...,   agg_level_desc = NULL,   asd_code = NULL,   asd_desc = NULL,   begin_code = NULL,   class_desc = NULL,   commodity_desc = NULL,   congr_district_code = NULL,   country_code = NULL,   country_name = NULL,   county_ansi = NULL,   county_code = NULL,   county_name = NULL,   domaincat_desc = NULL,   domain_desc = NULL,   end_code = NULL,   freq_desc = NULL,   group_desc = NULL,   load_time = NULL,   location_desc = NULL,   prodn_practice_desc = NULL,   reference_period_desc = NULL,   region_desc = NULL,   sector_desc = NULL,   short_desc = NULL,   source_desc = NULL,   state_alpha = NULL,   state_ansi = NULL,   state_fips_code = NULL,   state_name = NULL,   statisticcat_desc = NULL,   unit_desc = NULL,   util_practice_desc = NULL,   watershed_code = NULL,   watershed_desc = NULL,   week_ending = NULL,   year = NULL,   zip_5 = NULL,   as_numeric = TRUE,   progress_bar = TRUE,   format = \"csv\",   as = \"data.frame\" )"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data and return a data frame — nassqs","text":"... either named list parameters series additional parameters include operations, e.g. year__GE = 2010 records 2010 later. See details information available operators. agg_level_desc Geographic level (\"AGRICULTURAL DISTRICT\", \"COUNTY\", \"INTERNATIONAL\", \"NATIONAL\", \"REGION : MULTI-STATE\", \"REGION : SUB-STATE\", \"STATE\", \"WATERSHED\", \"ZIP CODE\"). asd_code Agriculture statistical district code. asd_desc Agriculture statistical district name / description. begin_code Week number indicating data series begins. class_desc Commodity class. commodity_desc Commodity, primary subject interest (e.g., \"CORN\", \"CATTLE\", \"LABOR\", \"TRACTORS\", \"OPERATORS\"). congr_district_code Congressional District codes. country_code Country code. country_name Country name. county_ansi County ANSI code. county_code County FIPS code. county_name County name. domaincat_desc Domain category within domain (e.g., domain_desc = \"SALES\", domain categories include $1,000 $9,999, $10,000 $19,999, etc). domain_desc Domain, characteristic operations produce particular commodity (e.g., \"ECONOMIC CLASS\", \"AREA OPERATED\", \"NAICS CLASSIFICATION\", \"SALES\"). chemical usage data, domain describes type chemical applied commodity. domain_desc: = \"TOTAL\" breakouts; .e., data value pertains completely short_desc. end_code = Week number data series ends. freq_desc Time period type covered data (\"ANNUAL\", \"SEASON\", \"MONTHLY\", \"WEEKLY\", \"POINT TIME\"). \"MONTHLY\" often covers one month. \"POINT TIME\" particular day. group_desc Commodity group within sector (e.g., sector_desc = \"CROPS\", groups \"FIELD CROPS\", \"FRUIT & TREE NUTS\", \"HORTICULTURE\", \"VEGETABLES\"). load_time Date time data load, e.g. \"2015-02-17 16:05:20\". location_desc Location code, e.g. 5-digit fips code counties. prodn_practice_desc Production practice, (e.g. \"PROTECTION\", \"OWNED, RIGHTS, LEASED\", \"ORGANIC, TRANSITIONING\", \"HIRED MANAGER\"). reference_period_desc Reference period data (e.g. \"JUN\", \"MID SEP\", \"WEEK #32\"). region_desc Region name (e.g. \"TEXAS\", \"WA & \", \"WEST COAST\", \"UMATILLA\"). sector_desc Sector, five high level, broad categories useful narrow choices. (\"ANIMALS & PRODUCTS\", \"CROPS\", \"DEMOGRAPHICS\", \"ECONOMICS\", \"ENVIRONMENTAL\"). short_desc concatenation six columns: commodity_desc, class_desc, prodn_practice_desc, util_practice_desc, statisticcat_desc, unit_desc. source_desc Source data (\"CENSUS\" \"SURVEY\"). Census program includes Census Ag well follow projects. Survey program includes national, state, county surveys. state_alpha 2-character state abbreviation, e.g. \"NM\". state_ansi State ANSI code. state_fips_code State FIPS code. state_name Full name state, e.g. \"ALABAMA\". statisticcat_desc Statistical category data (e.g., \"AREA HARVESTED\", \"PRICE RECEIVED\", \"INVENTORY\", \"SALES\"). unit_desc units data (e.g. \"TONS / ACRE\", \"TREES\", \"OPERATIONS\", \"NUMBER\", \"LB / ACRE\", \"BU / PLANTED ACRE\"). util_practice_desc Utilization practice (e.g. \"WIND\", \"SUGAR\", \"SILAGE\", \"REFINED\", \"FEED\", \"ANIMAL FEED\"). watershed_code Watershed code 8-digit HUC (e.g. \"13020100\"). watershed_desc Watershed/HUC name (e.g. \"UPPER COLORADO\"). week_ending Date ending week (e.g. \"1975-11-22\"). year Year data. Conditional values possible appending operation parameter, e.g. \"year__GE = 2020\" return records year >= 2020. See details operations. zip_5 5-digit zip code. as_numeric Whether convert data numeric format. Conversion replace missing notation \"(D)\" \"(Z)\" NA, removes need convert numeric format querying. progress_bar Whether display progress bar. format format return query . useful = \"text\". whether return data.frame, list, text string. See nassqs_parse().","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data and return a data frame — nassqs","text":"data frame, list, text string requested data.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data and return a data frame — nassqs","text":"nassqs() accepts parameters accepted USDA-NASS Quick Stats. parameters listed nassqs_params(), used form data query. Parameters can modified operations, appended parameter name. example, \"year__GE = 2020\" fetch data 2020 . Operations can take following form: __LE: less equal (<=) __LT: less (<) __GT: greater (>) __GE: = >= __LIKE = like __NOT_LIKE = like __NE = equal","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data and return a data frame — nassqs","text":"","code":"if (FALSE) {   # Get corn yields in Virginia in 2012   params <- list(commodity_desc = \"CORN\",                  year = 2012,                  agg_level_desc = \"COUNTY\",                  state_alpha = \"VA\",                  statisticcat_desc = \"YIELD\")   yields <- nassqs(params)   head(yields) }"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_GET.html","id":null,"dir":"Reference","previous_headings":"","what":"Issue a GET request to the NASS 'Quick Stats' API — nassqs_GET","title":"Issue a GET request to the NASS 'Quick Stats' API — nassqs_GET","text":"workhorse package provides core request functionality NASS 'Quick Stats' API: https://quickstats.nass.usda.gov/api/. cases nassqs() high-level functions used. nassqs_GET() uses httr::GET() make HTTP GET request, returns request object must parsed data.frame, list, R object. Higher-level functions parsing automatically. However, need access request object directly, nassqs_GET() provides .","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_GET.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Issue a GET request to the NASS 'Quick Stats' API — nassqs_GET","text":"","code":"nassqs_GET(   ...,   api_path = c(\"api_GET\", \"get_param_values\", \"get_counts\"),   progress_bar = TRUE,   format = c(\"csv\", \"json\", \"xml\") )"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_GET.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Issue a GET request to the NASS 'Quick Stats' API — nassqs_GET","text":"... either named list parameters series parameters use query api_path API path determines type request made. progress_bar whether display project bar . format format return query . useful = \"text\".","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_GET.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Issue a GET request to the NASS 'Quick Stats' API — nassqs_GET","text":"httr::GET() response object","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_GET.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Issue a GET request to the NASS 'Quick Stats' API — nassqs_GET","text":"","code":"if (FALSE) {   # Yields for corn in 2012 in Washington   params <- list(commodity_desc = \"CORN\",                  year = 2012,                  agg_level_desc = \"STATE\",                  state_alpha = \"WA\",                  statisticcat_desc = \"YIELD\")    # Returns a request object that must be parsed either manually or   # by using nassqs_parse()   response <- nassqs_GET(params)   yields <- nassqs_parse(response)   head(yields)    # Get the number of records that would be returned for a given request   # Equivalent to 'nassqs_record_count(params)'   response <- nassqs_GET(params, api_path = \"get_counts\")   records <- nassqs_parse(response)   records    # Get the list of allowable values for the parameters 'statisticcat_desc'   # Equivalent to 'nassqs_param_values(\"statisticcat_desc\")'   req <- nassqs_GET(list(param = \"statisticcat_desc\"),                     api_path = \"get_param_values\")   statisticcat_desc_values <- nassqs_parse(req, as = \"list\")   head(statisticcat_desc_values) }"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_acres.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NASS Area given a set of parameters. — nassqs_acres","title":"Get NASS Area given a set of parameters. — nassqs_acres","text":"Get NASS Area given set parameters.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_acres.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NASS Area given a set of parameters. — nassqs_acres","text":"","code":"nassqs_acres(   ...,   area = c(\"AREA\", \"AREA PLANTED\", \"AREA BEARING\", \"AREA BEARING & NON-BEARING\",     \"AREA GROWN\", \"AREA HARVESTED\", \"AREA IRRIGATED\", \"AREA NON-BEARING\", \"AREA PLANTED\",     \"AREA PLANTED, NET\") )"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_acres.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NASS Area given a set of parameters. — nassqs_acres","text":"... either named list parameters series parameters form query area type area return. Default types.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_acres.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NASS Area given a set of parameters. — nassqs_acres","text":"data.frame acres data","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_acres.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get NASS Area given a set of parameters. — nassqs_acres","text":"","code":"if (FALSE) {   # Get Area bearing for Apples in Washington, 2012.   params <- list(     commodity_desc = \"APPLES\",     year = \"2012\",     state_name = \"WASHINGTON\",     agg_level_desc = \"STATE\"   )   area <- nassqs_acres(params, area = \"AREA BEARING\")   head(area) }"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/Set the environmental variable NASSQS_TOKEN to the API key — nassqs_auth","title":"Get/Set the environmental variable NASSQS_TOKEN to the API key — nassqs_auth","text":"API key provided, sets environmental variable. can set API key four ways:","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/Set the environmental variable NASSQS_TOKEN to the API key — nassqs_auth","text":"","code":"nassqs_auth(key)"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/Set the environmental variable NASSQS_TOKEN to the API key — nassqs_auth","text":"key API key (obtained https://quickstats.nass.usda.gov/api/)","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_auth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get/Set the environmental variable NASSQS_TOKEN to the API key — nassqs_auth","text":"directly variable R program: nassqs_auth(key = \"<api key>\" setting NASSQS_TOKEN R environment file (never enter ). entering console asked (stored rest session.)","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_auth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get/Set the environmental variable NASSQS_TOKEN to the API key — nassqs_auth","text":"","code":"# Set the API key nassqs_auth(key = \"<your api key>\") Sys.getenv(\"NASSQS_TOKEN\") #> [1] \"<your api key>\""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_byfips.html","id":null,"dir":"Reference","previous_headings":"","what":"Allow querying for a given set of counties based on FIPS. — nassqs_byfips","title":"Allow querying for a given set of counties based on FIPS. — nassqs_byfips","text":"wrapper allows specifying list counties FIPS code. iterates state list FIPS, downloading separately concatenating.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_byfips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allow querying for a given set of counties based on FIPS. — nassqs_byfips","text":"","code":"nassqs_byfips(fips, ...)"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_byfips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allow querying for a given set of counties based on FIPS. — nassqs_byfips","text":"fips list 5-digit fips codes ... either named list parameters series parameters form query","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_byfips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allow querying for a given set of counties based on FIPS. — nassqs_byfips","text":"data.frame data fips code","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_byfips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allow querying for a given set of counties based on FIPS. — nassqs_byfips","text":"","code":"if (FALSE) { nassqs_byfips(   fips = c(\"19001\", \"17005\", \"17001\"),   commodity_desc = \"CORN\",   year = 2019,   statisticcat_desc = \"YIELD\") }"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the response. — nassqs_check","title":"Check the response. — nassqs_check","text":"Check response valid, .e. exceed 50,000 records parameter values valid. used ensure query valid querying reduce wait times receiving error.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the response. — nassqs_check","text":"","code":"nassqs_check(response)"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the response. — nassqs_check","text":"response httr::GET() request result returned API.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the response. — nassqs_check","text":"nothing check passed, informative error passed.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated: Return list of NASS QS parameters. — nassqs_fields","title":"Deprecated: Return list of NASS QS parameters. — nassqs_fields","text":"Deprecated. Use nassqs_params() instead.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated: Return list of NASS QS parameters. — nassqs_fields","text":"","code":"nassqs_fields(...)"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated: Return list of NASS QS parameters. — nassqs_fields","text":"... parameter, series parameters, list parameters like description . missing, list available parameters returned.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_param_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all values for a specific parameter. — nassqs_param_values","title":"Get all values for a specific parameter. — nassqs_param_values","text":"Returns list possible values given parameter. Including additional parameters restrict list valid values data meeting additional parameter restrictions. However, possible requesting entire dataset filtering unique values. recommended make query small possible including additional parameters","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_param_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all values for a specific parameter. — nassqs_param_values","text":"","code":"nassqs_param_values(param, ...)"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_param_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all values for a specific parameter. — nassqs_param_values","text":"param name NASS quickstats parameter ... additional parameters filter valid responses.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_param_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all values for a specific parameter. — nassqs_param_values","text":"list containing valid values parameter","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_param_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all values for a specific parameter. — nassqs_param_values","text":"","code":"if (FALSE) {   # See all values available for the statisticcat_desc field. Values may not   # be available in the context of other parameters you set, for example   # a given state may not have any 'YIELD' in blueberries if they don't grow   # blueberries in that state.   # Requires an API key:      nassqs_param_values(\"source_desc\")    # Valid values for a parameter given a specific set of additional   # parameters   nassqs_param_values(\"commodity_desc\", state_fips_code = \"53\",                        county_code = \"077\", year = 2017,                        group_desc = \"EXPENSES\") }"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Return list of NASS QS parameters. — nassqs_params","title":"Return list of NASS QS parameters. — nassqs_params","text":"Contains simple hard-coded list available parameters. parameter name provided, returns list parameters. information can found API documentation parameters found https://quickstats.nass.usda.gov/api/#param_define.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return list of NASS QS parameters. — nassqs_params","text":"","code":"nassqs_params(...)"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return list of NASS QS parameters. — nassqs_params","text":"... parameter, series parameters, list parameters like description . missing, list available parameters returned.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return list of NASS QS parameters. — nassqs_params","text":"list available parameters description subset","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return list of NASS QS parameters. — nassqs_params","text":"","code":"# Get a list of all available parameters nassqs_params() #>  [1] \"agg_level_desc\"        \"asd_code\"              \"asd_desc\"              #>  [4] \"begin_code\"            \"class_desc\"            \"commodity_desc\"        #>  [7] \"congr_district_code\"   \"country_code\"          \"country_name\"          #> [10] \"county_ansi\"           \"county_code\"           \"county_name\"           #> [13] \"domaincat_desc\"        \"domain_desc\"           \"end_code\"              #> [16] \"freq_desc\"             \"group_desc\"            \"load_time\"             #> [19] \"location_desc\"         \"prodn_practice_desc\"   \"reference_period_desc\" #> [22] \"region_desc\"           \"sector_desc\"           \"short_desc\"            #> [25] \"state_alpha\"           \"state_ansi\"            \"state_name\"            #> [28] \"state_fips_code\"       \"statisticcat_desc\"     \"source_desc\"           #> [31] \"unit_desc\"             \"util_practice_desc\"    \"watershed_code\"        #> [34] \"watershed_desc\"        \"week_ending\"           \"year\"                  #> [37] \"zip_5\"                  # Get information about specific parameters nassqs_params(\"source_desc\", \"group_desc\") #> [1] \"source_desc: Data source. Either 'CENSUS' or 'SURVEY'\"        #> [2] \"group_desc: Commodity group category. A subset of the sector\""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a response object from nassqs_GET(). — nassqs_parse","title":"Parse a response object from nassqs_GET(). — nassqs_parse","text":"Returns data frame, list, text string. data.frame, columns except year strings 'Quick Stats' data returns suppressed data '(D)', '(Z)', character indicators mean different things. Converting value numerical results NA, loses information.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a response object from nassqs_GET(). — nassqs_parse","text":"","code":"nassqs_parse(req, as_numeric = TRUE, as = c(\"data.frame\", \"list\", \"text\"), ...)"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a response object from nassqs_GET(). — nassqs_parse","text":"req GET response nassqs_GET() as_numeric whether convert values numeric format. whether return data.frame, list, text string ... additional parameters passed jsonlite::fromJSON() utils::read.csv()","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a response object from nassqs_GET(). — nassqs_parse","text":"data frame, list, text string content response.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a response object from nassqs_GET(). — nassqs_parse","text":"","code":"if (FALSE) {   # Set parameters and make the request   params <- list(commodity_desc = \"CORN\",                  year = 2012,                  agg_level_desc = \"STATE\",                  state_alpha = \"WA\",                  statisticcat_desc = \"YIELD\")   response <- nassqs_GET(params)    # Parse the response to a data frame   corn <- nassqs_parse(response, as = \"data.frame\")   head(corn)    # Parse the response into a raw character string.   corn_text<- nassqs_parse(response, as = \"text\")   head(corn_text)    # Get a list of parameter values and parse as a list   response <- nassqs_GET(list(param = \"statisticcat_desc\"),                     api_path = \"get_param_values\")   statisticcat_desc_values <- nassqs_parse(response, as = \"list\")   head(statisticcat_desc_values) }"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_record_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a count of number of records for given parameters. — nassqs_record_count","title":"Get a count of number of records for given parameters. — nassqs_record_count","text":"Returns number records fit set parameters. Useful current parameter set returns 50,000 record limit.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_record_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a count of number of records for given parameters. — nassqs_record_count","text":"","code":"nassqs_record_count(...)"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_record_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a count of number of records for given parameters. — nassqs_record_count","text":"... either named list parameters series parameters form query","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_record_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a count of number of records for given parameters. — nassqs_record_count","text":"integer number records returned API response query","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_record_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a count of number of records for given parameters. — nassqs_record_count","text":"","code":"if (FALSE) {   # Check the number of records returned for corn in 1995, Washington state   params <- list(     commodity_desc = \"CORN\",     year = \"2005\",     agg_level_desc = \"STATE\",     state_name = \"WASHINGTON\"   )      records <- nassqs_record_count(params)    records  # returns 17 }"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_yields.html","id":null,"dir":"Reference","previous_headings":"","what":"Get yield records for a specified crop. — nassqs_yields","title":"Get yield records for a specified crop. — nassqs_yields","text":"Returns yields specified parameters. function intended simplify common requests.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_yields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get yield records for a specified crop. — nassqs_yields","text":"","code":"nassqs_yields(...)"},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_yields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get yield records for a specified crop. — nassqs_yields","text":"... either named list parameters series parameters form query","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_yields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get yield records for a specified crop. — nassqs_yields","text":"data.frame yields data","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/nassqs_yields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get yield records for a specified crop. — nassqs_yields","text":"","code":"if (FALSE) {   # Get yields for wheat in 2012, all geographies   params <- list(     commodity_desc = \"WHEAT\",      year = \"2012\",      agg_level_desc = \"STATE\",     state_alpha = \"WA\")        yields <- nassqs_yields(params)   head(yields) }"},{"path":"https://docs.ropensci.org/rnassqs/reference/rnassqs-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rnassqs-package: Access the NASS 'Quick Stats' API — rnassqs-package","title":"rnassqs-package: Access the NASS 'Quick Stats' API — rnassqs-package","text":"rnassqs wrapper United States Department Agriculture's National Agricultural Statistical Service (NASS) 'Quick Stats' API enable getting NASS 'Quick Stats' data directly R.  Based httr API package guide.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/rnassqs-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rnassqs-package: Access the NASS 'Quick Stats' API — rnassqs-package","text":"functions package facilitate getting data NASS 'Quick Stats'. handles API key checking storage, authorization, fetching data.","code":""},{"path":"https://docs.ropensci.org/rnassqs/reference/rnassqs-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"rnassqs-package: Access the NASS 'Quick Stats' API — rnassqs-package","text":"https://quickstats.nass.usda.gov","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rnassqs/reference/rnassqs-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rnassqs-package: Access the NASS 'Quick Stats' API — rnassqs-package","text":"Nicholas Potter","code":""},{"path":"https://docs.ropensci.org/rnassqs/news/index.html","id":"rnassqs-062","dir":"Changelog","previous_headings":"","what":"rnassqs 0.6.2","title":"rnassqs 0.6.2","text":"Add testing http errors, explicit handling error messages 413 429. Add querying fips code nassqs_fips() [Issue #30] Depends R(>= 3.5.0) since test objects saved RDS format.","code":""},{"path":"https://docs.ropensci.org/rnassqs/news/index.html","id":"rnassqs-061","dir":"Changelog","previous_headings":"","what":"rnassqs 0.6.1","title":"rnassqs 0.6.1","text":"CRAN release: 2022-03-11 Explicit handling error code 429 added.","code":""},{"path":"https://docs.ropensci.org/rnassqs/news/index.html","id":"rnassqs-060","dir":"Changelog","previous_headings":"","what":"rnassqs 0.6.0","title":"rnassqs 0.6.0","text":"CRAN release: 2022-03-10 default download CSV format instead JSON reduce download sizes. Additional tests added. Parameters clarified parameters usable query returned nassqs_params() format specific argument nassqs(). Although CV Value returned columns Quick Stats, queriable parameters. default, nassqs() now converts character Value numeric. Raw character Value can obtained as_numeric = FALSE. Documentation query parameters improved available query parameters explicit nassqs() now. Functionality unchanged parameter names listed available help. Thanks Robert Dinterman initial contribution. option see valid parameter values given query values nassqs_param_values() added. nassqs_record_count() now validates parameters.","code":""},{"path":"https://docs.ropensci.org/rnassqs/news/index.html","id":"rnassqs-050","dir":"Changelog","previous_headings":"","what":"rnassqs 0.5.0","title":"rnassqs 0.5.0","text":"CRAN release: 2019-08-19 Approval rOpensci inclusion! Additional testing improve code coveral @nealrichardson Small changes rOpensci review process Switch rOpensci repository Change syntax allow lower case query parameter values Change syntax allow specifying parameter separate function argument rather single list (addition specifying single list) Create package website pkgdown Standardize code style package code, examples, vignette Simplify authentication Expanded test coverage use httptest::with_mock_api() Better clarification documentation documentation examples Improved README vignette","code":""},{"path":"https://docs.ropensci.org/rnassqs/news/index.html","id":"rnassqs-0409000","dir":"Changelog","previous_headings":"","what":"rnassqs 0.4.0.9000","title":"rnassqs 0.4.0.9000","text":"Development version","code":""},{"path":"https://docs.ropensci.org/rnassqs/news/index.html","id":"rnassqs-040","dir":"Changelog","previous_headings":"","what":"rnassqs 0.4.0","title":"rnassqs 0.4.0","text":"CRAN release: 2019-05-03 Add automated unit tests work locally others work CRAN. Improve documentation core functions. Add parsing CSV formatted data. Improve authentication. Simplify function calls eliminate redundant calls. Add working examples tests. fix name error function nassqs_params_values nassqs_param_values","code":""},{"path":"https://docs.ropensci.org/rnassqs/news/index.html","id":"rnassqs-030","dir":"Changelog","previous_headings":"","what":"rnassqs 0.3.0","title":"rnassqs 0.3.0","text":"Prepare package CRAN submission. Vignettes README.md date respect current functions. Fix tests. Minor spelling fixes contributed Julia Piaskowski <@jpiaskowski> Remove test code couldn’t run due API needing authentication.","code":""}]
